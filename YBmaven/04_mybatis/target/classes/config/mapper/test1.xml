<?xml version="1.0" encoding="UTF-8" ?>              <!-- 얘는 dao에서 쓴다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 가장 상위의 태그 : 루트태그. 하나만 있어야한다. 여기선 mapper. 위의 독타입과 일치해야한다. -->
<!-- namesapce는 이 파일을 고유하게 다른 xml과 구분짓는 이름. -->
<!-- sql은 누가 접근하나? dao가 접근한다. 여기선 TestMapper1.java -->

<mapper namespace="kr.co.mlec.dao.TestMapper1">
	<select id="selectMemberInfo1" parameterType="string"
		resultType="Member">
		<!-- id속성은 여러개의 태그 중에서 고유하게 하기위해 -->
		<!-- java.lang.String대신 string쓴다 -->
		<!--ResultSet대신 여기선 resultType을 주면 설정한 타입 그대로 받을 수있다. 거의vo타입 -->
		select id,
		name,
		addr,
		email
		from tb_mybatis_member
		where id = #{id}  <!-- ?대신에 
			#{id}를 쓴다. 하나라면 중괄호 안에 아무런 값을 주지않아도되지만 여러개라면 = 앞에있는 값을 준다. mybatis의 파라미터라고 
			얘기할수있다. 값은 dao에서 받아온다. -->
	</select>

	<!-- 파라미터에 값을 두개이상 받을경우. session.selectOne(".....id...", ??); ??에 id와 name값을 
		같이 주고싶다..뭐를 쓴다? VO! -->

	<select id="selectMemberInfo2" parameterType="Member"
		resultType="Member">
		select id,
		name,
		addr,
		email
		from tb_mybatis_member
		where id =
		#{id}
		and name = #{name}
	</select>

	<select id="selectMemberInfo3" parameterType="string"
		resultType="string">
		select name
		from tb_mybatis_member
		where id = #{id}
	</select>

	<select id="selectMemberInfo4" resultType="int">
		select count(*)
		from
		tb_mybatis_member
	</select>

	<select id="selectMemberList1" resultType="Member"> <!-- 여러개의 로우를 담을때! resultType에는 여러개가 온다고 List를 주지 말고 하나올때랑 똑같이 쓴다. -->
		select id,
		name,
		email,
		addr,
		join_date as joinDate  <!-- 언더바가 있는 값은 alias를 활용해서 
			set을 -->
		from tb_mybatis_member
		order by id
	</select>

	<select id="selectMemberList2" resultType="string">
		select name
		from
		tb_mybatis_member
		order by id
	</select>


	<!-- SQL의 결과와 VO를 결합시키는 태그! -->
	<!-- 타입으로 묶겠다. id는 고유이름 // 리절트맵은 sql의 결과를 특정한 vo에 랩핑시켜주기위한것 -->
	<!-- 컬럼을 전부다 안적어줘도 되지만 전부 적어주는 것이 좋다. -->
	<resultMap type="Member" id="memberMap">
		<result column="id" property="id" />
		<result column="name" property="name" />
		<result column="addr" property="addr" />
		<result column="email" property="email" />
		<result column="join_date" property="joinDate" />
	</resultMap>

	<select id="selectMemberList3" resultMap="memberMap"> <!-- 리절트맵을 통해 결과를 가져오고싶다면 리절트맵으로 여기 값을 줘야한다. -->
		select *
		from tb_mybatis_member
		order by id
	</select>

	<insert id="insertMember" parameterType="Member"> <!-- 필요하면 resultType선언하는데 int로 준다 -->
		insert into tb_mybatis_member (
		id, name, email, addr
		) values (
		#{id},
		#{name}, #{email}, #{addr}
		)
	</insert>

	<update id="updateMember" parameterType="Member">
		update
		tb_mybatis_member
		set addr = #{addr},
		email = #{email}
		where id = #{id}
	</update>

	<delete id="deleteMember" parameterType="string">
		delete
		from
		tb_mybatis_member
		where id = #{id}
	</delete>

	<select id="selectMemberIteratorList" parameterType="Member"
		resultMap="memberMap">
		select *
		from tb_mybatis_member
		<!-- 배열이나 리스트 활용하기!!!!!! -->
		<!-- item에는 반복한 값을 받는 변수명을 준다. collection에는 뭘 반복해야하는지, open과 close는 시작과 
			끝을 이야기한다. 소괄호 안에 반복되는 값을 넣어주기위해 separator는 사이의 값 -->
		where addr in
		<foreach item="addr" collection="addrs2" separator=","
			open="(" close=")">
			#{addr}
		</foreach>
	</select>


	<!-- 쿼리의 중복된 부분의 처리 -->
	<sql id="commonMember">
		from tb_mybatis_member
		where addr like '%e%'
	</sql>

	<select id="selectMemberIncludeList" resultMap="memberMap"> <!-- 리절트맵이 목록가져오는거 -->
		select *
		<include refid="commonMember" />
	</select>

	<select id="selectMemberIncludeListCount" resultType="int">
		select count(*)
		<include refid="commonMember" />
	</select>


	<!-- 선택박스 검색 처리 부분 -->
	<select id="selectMemberSearchList" parameterType="Search"
		resultMap="memberMap">
		select *
		from tb_mybatis_member
		<choose>  <!-- switch 같은 것 -->
			<when test="searchType == 'id'">   <!-- test가 조건을 따지는것. 값을 표현할 때는 ''로 묶어준다 파라미터타입에있는 겟메서드 호출 -->
				where id like '%' || #{searchWord} || '%'  <!-- 조건이 맞다면 수행할 문장 -->
			</when>
			<when test="searchType == 'name'">
				where name like '%' || #{searchWord} || '%'
			</when>
			<otherwise> <!-- 위의 조건이 아니라면 기본조건으로 줄 것을 넣어 준다. -->
				where addr like '%' || #{searchWord} || '%'
			</otherwise>
		</choose>
	</select>


	<select id="selectMemberInputList" parameterType="Member"
		resultMap="memberMap"> <!-- search는 값을 하나밖에 담지 못하니 파라미터타입 멤버로 준다. -->
		select *
		from tb_mybatis_member
		<where> <!-- 조건에 맞는것이 하나도 없다면 where문이 생성되지 않는다. 만약 조건붙은것에 and가 있다면 자동으로 삭제해서실행해줌 -->
			<if test="id != null">
				and id like '%' || #{id} || '%'
			</if>
			<if test="name != null">
				and name like '%' || #{name} || '%'
			</if>
		</where>
			<!-- and email like '%c%' -->
	</select>

</mapper>  <!-- 이 태그하나당 메서드를 하나 만든다. 메서드이름은 id(selectMemeberInfo1)랑 똑같이 만든다. -->
